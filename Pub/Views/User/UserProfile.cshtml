

@model E658.Models._UserManagementE658

@{
    ViewBag.Title = "UserProfile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="content-wrapper">

    <section class="content-header">
        <h1 style="text-align:center"><span> User Profile</span></h1>

        <div id="ErrorMessage" style="margin-top:5px">
            @if (TempData["ScfMsg"] != null)
            {
                <div id="Msg" class="col-lg-12  alert alert-success">
                    <button type="button" class="close" data-dismiss="alert">×</button>
                    <strong>Alert! </strong> @TempData["ScfMsg"]
                </div>
            }
            else if (TempData["ErrMsg"] != null)
            {
                <div id="Msg" class="col-lg-12 alert alert-danger">
                    <button type="button" class="close" data-dismiss="alert">×</button>
                    <strong>Alert! </strong>@TempData["ErrMsg"]
                </div>
            }
        </div>
    </section>

    <br />
    @using (Html.BeginForm())
    {
        <section class="col-lg-12 connectedSortable" style="margin-top:5px">
            <div class="nav-tabs-custom">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="box-body">
                            @*Service No and  @*Rank*@
                            <div class="form-group">
                                @Html.Label("Service Number", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.ServiceNo, new { @class = "form-control", autocomplete = "off", @readonly = "readonly" })
                                @Html.HiddenFor(model => model.SNo)
                                @Html.HiddenFor(model => model.EUMID)
                                @Html.ValidationMessageFor(model => model.ServiceNo, string.Empty, new { @class = "label label-danger" })
                            </div>

                            @*Rank*@
                            <div class="form-group">
                                @Html.Label("Rank", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.Rank, new { @class = "form-control", autocomplete = "off", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.Rank, string.Empty, new { @class = "label label-danger" })

                            </div>

                            <div class="form-group">

                                @Html.Label("Name", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.FullName, new { @class = "form-control", autocomplete = "off", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.FullName, string.Empty, new { @class = "label label-danger" })

                            </div>
                        </div>
                    </div>

                    <div class="col-lg-6">
                        <div class="box-body">
                            @*Name*@
                            <div class="form-group">
                               
                                    @Html.Label("Current User Appoinment", new { @class = "control-label" })
                                    @Html.TextBoxFor(model => model.UserRole, new { @class = "form-control - ", autocomplete = "off", @readonly = "readonly" })      
                                    @Html.HiddenFor(model => model.RoleId)                                                 
                            </div>

                            @*Current User Location *@
                            <div class="form-group">                                
                                    @Html.Label("Current User Location", new { @class = "control-label" })
                                    @Html.TextBoxFor(model => model.Location, new { @class = "form-control", autocomplete = "off", @readonly = "readonly" })   
                                    @Html.HiddenFor(model => model.Division)                              
                            </div>
                            <div class="form-group">
                                <input type="button" value="Hand Over Appointment" class="btn btn-info pull-right" name="btnSave" id="btnHandOver">                         
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <section class="col-lg-12 connectedSortable" id="dvHandOverSection">
            <div class="nav-tabs-custom">
                <div class="row">

                    <div class="col-lg-6">
                        <div class="box-body">

                            @*From Date*@
                            <div class="form-group">
                                @Html.Label("From Date", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.HandOverDateFrom, new { @class = "form-control - ", autocomplete = "off", @type = "date" })
                                @Html.ValidationMessageFor(model => model.HandOverDateFrom, string.Empty, new { @class = "label label-danger" })
                            </div>
                            <div class="form-group">
                                @Html.Label("Tempory Handover", new { @class = "control-label" })
                                @Html.CheckBox("isTempHandover",false)
                               
                            </div>                        
                           
                           

                            @*To Date*@
                            <div class="form-group" id="dvHandOverToDate" style="padding-top:20px">
                                @Html.Label("To Date", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.HandOverDateTo, new { @class = "form-control - ", autocomplete = "off", @type = "date" })
                                @Html.ValidationMessageFor(model => model.HandOverDateTo, string.Empty, new { @class = "label label-danger" })
                            </div>                       
                        </div>             
                    </div>   
                    
                    <div class="col-lg-6">
                        <div class="box-body">

                            @*Service No*@
                            <div class="form-group">
                                @Html.Label("Service No", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.HandOverServiceNo, new { @class = "form-control - ", autocomplete = "off"})
                                @Html.HiddenFor(model => model.HandOverSNo)
                                @Html.ValidationMessageFor(model => model.HandOverServiceNo, string.Empty, new { @class = "label label-danger" })
                            </div>

                            @*Rank*@
                            <div class="form-group">
                                @Html.Label("Rank", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.HandOverRank, new { @class = "form-control - ", autocomplete = "off", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.HandOverRank, string.Empty, new { @class = "label label-danger" })
                            </div>

                            @*Name*@
                            <div class="form-group">
                                @Html.Label("Name", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.HandOverName, new { @class = "form-control - ", autocomplete = "off", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.HandOverName, string.Empty, new { @class = "label label-danger" })
                            </div>
                           
                             
                            <button id="btnClear" class="btn btn-warning pull-left" value="" type="button">Clear</button>  
                            <button id="btnSaveDetails" class="btn btn-success pull-right" value="" type="submit">Save</button> 
                        </div> 
                    </div>                
                </div>
            </div>
        </section>
    }

</div>

<script src="~/Scripts/Jq.js"></script>

<script type="text/javascript">

    $(document).ready(function () {
        $("#dvHandOverSection").hide();
        $("#dvHandOverToDate").hide();

    });

    $(function () {
       
        $("#btnHandOver").click(function () {
           
            $("#dvHandOverSection").show();
        });
    });

    $(function () {
        var clickCount = 0;
        $("#isTempHandover").click(function () {
            clickCount++;
            if (clickCount % 2 === 1) {
                $("#dvHandOverToDate").show();
            }
            else {
                $("#dvHandOverToDate").hide();
            }

        });
    });

    $(function () {
        $("#HandOverServiceNo").change(function () {
            $.ajax({
                url: '@Url.Content("~/User/getUserInfo")',
                type: 'POST',
                dataType: 'json',
                data: { id: $("#HandOverServiceNo").val() },
                success: function (data) {
                    if (data.ServiceNo == "Service number is not valid.") {
                        alert("Service number is not valid.");

                        $("#HandOverServiceNo").val('');
                        $("#HandOverSNo").val('');
                        $("#HandOverName").val('');
                        $("#HandOverRank").val('');

                    }
                    else {
                        //$("#OMTServiceNo").val(data.ServiceNo);
                        $("#HandOverSNo").val(data.SNo);
                        $("#HandOverName").val(data.Name);
                        $("#HandOverRank").val(data.Rank);
                    }
                },
                error: function () {
                    alert("error in function");
                }
            });
        });
    });

    @*$(function () {
        $("#btnSaveDetails").click(function () {

            var temHandOverStatus = $("#TemparyHandover").val();
            alert(temHandOverStatus);
            debugger;
            var objUser = {};
            objUser.HandOverDateFrom = $("#HandOverDateFrom").val();

            if (temHandOverStatus == true) {
                objUser.HandOverDateTo = $("#HandOverDateTo").val();
            }
            objUser.TempHandOverStatus = temHandOverStatus
            objUser.HandOverSNo = $("#HandOverSNo").val();
            objUser.RoleId = $("#RoleId").val();
            objUser.Division = $("#Division").val();
            objUser.Location = $("#Location").val();
            objUser.SNo = $("#SNo").val();
            objUser.isTempHandover = $("#isTempHandover").val();

            $.ajax({
                url: '@Url.Content("~/User/UserProfile")',
                type: 'POST',
                data: '{objUser:' + JSON.stringify(objUser) + '}',
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    if (data.ServiceNo == "Service number is not valid.") {
                        alert("Service number is not valid.");

                        $("#HandOverServiceNo").val('');
                        $("#HandOverSNo").val('');
                        $("#HandOverName").val('');
                        $("#HandOverRank").val('');

                    }
                    else {
                        $("#HandOverSNo").val(data.SNo);
                        $("#HandOverName").val(data.Name);
                        $("#HandOverRank").val(data.Rank);
                    }
                },
                error: function () {
                    alert("error in function");
                }
            });
        });
    });*@

</script>