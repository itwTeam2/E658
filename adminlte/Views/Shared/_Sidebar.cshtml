
<!-- Left side column. contains the logo and sidebar -->

@if (Session["LoginUser"] != null)
{
<aside class="main-sidebar">
    <!-- sidebar: style can be found in sidebar.less -->
    <section class="sidebar">

        <!-- Sidebar user panel -->
        <div class="user-panel" style="height:105px">
            @{
                if (Session["LoginUser"] != null)
                {
                    using (var _db = new E658.Models.dbContext())
                    {
                        int userRoleID = Convert.ToInt32(Session["UserLoginType"]);
                        string serviceNo = Session["LoginUser"].ToString();
                        var personInfo = _db.Vw_PersonalDetail
                                            .Where(x => x.ServiceNo == serviceNo)
                                            .Select(x => new { x.Rank, x.Name })
                                            .FirstOrDefault();

                        var userRoleMessages = new Dictionary<int, string>
                        {
                            { (int)E658.Enum.EnumE658UserType.FormationUser, "You are login as Formation User" },
                            { (int)E658.Enum.EnumE658UserType.StaffCarUser, "You are login as Staff Car User" },
                            { (int)E658.Enum.EnumE658UserType.FinalizedAuthorization, "You are login as Finalized Authorization Person" },
                            { (int)E658.Enum.EnumE658UserType.MToOCT, "You are login as MTO/OCT" },
                            { (int)E658.Enum.EnumE658UserType.MTController, "You are login as MT Controller" },
                            { (int)E658.Enum.EnumE658UserType.HQUser, "You are login as HQ User" },
                            { (int)E658.Enum.EnumE658UserType.HQAppAuth, "You are login as HQ Approval User" },
                            { (int)E658.Enum.EnumE658UserType.SOGO, "You are login as SO GO" }
                        };

                        string userRoleMessage = userRoleMessages.ContainsKey(userRoleID) ? userRoleMessages[userRoleID] : "Unknown Role";



                        <div class="info" style="margin-left:-50px">
                            <p>@serviceNo</p>
                            <p>@personInfo.Rank</p>
                            <p>@personInfo.Name</p>
                            <p class="info" style="font-size:11px">
                                @userRoleMessage
                            </p>
                        </div>
                    }

                }

                else
                {

                    @Html.Action("Login", "User");
                }


            }
        </div>

        <!-- search form -->
        @*<form action="#" method="get" class="sidebar-form">
                <div class="input-group">-->
                    <input type="text" name="q" class="form-control" placeholder="Search...">
                    <span class="input-group-btn">
                            <button type="submit" name="search" id="search-btn" class="btn btn-flat">
                                <i class="fa fa-search"></i>
                            </button>
                    </span>
                </div>
            </form>*@

        <!-- /.search form -->
        <!-- sidebar menu: : style can be found in sidebar.less -->
    <ul class="sidebar-menu" data-widget="tree">
        <li class="header">MAIN NAVIGATION</li>
        @{
            int userRole = Convert.ToInt32(Session["UserLoginType"]);
            var menuItems = new Dictionary<int, List<dynamic>>
            {
                {
                    (int)E658.Enum.EnumE658UserType.StaffCarUser, new List<dynamic>
                    {
                        new { Action = "E658FinalApprovedList", Controller = "E658", Icon = "fa-thumbs-up", Text = "Approved E658" },
                        new { Action = "E658RejectedList", Controller = "E658", Icon = "fa-thumbs-down", Text = "Rejected List" },
                        new { Action = "UserProfile", Controller = "User", Icon = "fa-user", Text = "Handing Over Authority" }
                    }
                },
                {
                    (int)E658.Enum.EnumE658UserType.FormationUser, new List<dynamic>
                    {
                        new { Action = "E658List", Controller = "E658", Icon = "fa-fast-forward", Text = "Pending Approval E658" },
                        new { Action = "TrnsPortReqList", Controller = "LongRun", Icon = "fa-sliders", Text = "Transport Request" },
                        new { Action = "E658FinalApprovedList", Controller = "E658", Icon = "fa-thumbs-up", Text = "Approved E658" },
                        new { Action = "E658RejectedList", Controller = "E658", Icon = "fa-thumbs-down", Text = "Rejected List" },
                        new { Action = "RRList", Controller = "RoutineRun", Icon = "fa-thumbs-up", Text = "RR List" }
                    }
                },
                {
                    (int)E658.Enum.EnumE658UserType.FinalizedAuthorization, new List<dynamic>
                    {
                        new { Action = "Dashboardv1ToMTO", Controller = "Dashboard", Icon = "fa-dashboard", Text = "Dashboard" },
                        new { Action = "E658List", Controller = "E658", Icon = "fa-fast-forward", Text = "Pending Approval E658" },
                        new { Action = "E658FinalApprovedList", Controller = "E658", Icon = "fa-thumbs-up", Text = "Approved E658" },
                        new { Action = "E658RejectedList", Controller = "E658", Icon = "fa-thumbs-down", Text = "Rejected List" },
                        new { Action = "HoldRunList", Controller = "E658", Icon = "fa-check", Text = "Hold Run List" },
                        new { Action = "UserProfile", Controller = "User", Icon = "fa-user", Text = "Handing Over Authority" },
                        new { Action = "RRList", Controller = "RoutineRun", Icon = "fa-thumbs-up", Text = "RR List" }

                    }
                },
                {
                    (int)E658.Enum.EnumE658UserType.MToOCT, new List<dynamic>
                    {
                        new { Action = "Dashboardv1ToMTO", Controller = "Dashboard", Icon = "fa-dashboard", Text = "Dashboard" },
                        new { Action = "E658List", Controller = "E658", Icon = "fa-fast-forward", Text = "Pending Approval E658" },
                        new { Action = "E658FinalApprovedList", Controller = "E658", Icon = "fa-thumbs-up", Text = "Approved E658" },
                        new { Action = "E658RejectedList", Controller = "E658", Icon = "fa-thumbs-down", Text = "Rejected List" },
                        new { Action = "HoldRunList", Controller = "E658", Icon = "fa-check", Text = "Hold Run List" },
                        new { Action = "UserProfile", Controller = "User", Icon = "fa-user", Text = "Handing Over Authority" },
                        new { Action = "CreateMTController", Controller = "User", Icon = "fa-user", Text = "Create MT Controller" },
                        new { Action = "RRList", Controller = "RoutineRun", Icon = "fa-thumbs-up", Text = "RR List" }
                    }
                },
                {
                    (int)E658.Enum.EnumE658UserType.MTController, new List<dynamic>
                    {
                        new { Action = "Dashboardv1ToMTO", Controller = "Dashboard", Icon = "fa-dashboard", Text = "Dashboard" },
                        new { Action = "CreateMTController", Controller = "User", Icon = "fa-user", Text = "User Creating" },
                        new { Action = "MTControllerList", Controller = "User", Icon = "fa-circle-o", Text = "Duty List" },
                        new { Action = "E658List", Controller = "E658", Icon = "fa-fast-forward", Text = "Pending Approval E658" },
                        new { Action = "E658FinalApprovedList", Controller = "E658", Icon = "fa-thumbs-up", Text = "Approved E658" },
                        new { Action = "E658RejectedList", Controller = "E658", Icon = "fa-thumbs-down", Text = "Rejected List" }
                    }
                },
                {
                    (int)E658.Enum.EnumE658UserType.HQUser, new List<dynamic>
                    {
                        new { Action = "UserMgtCreate", Controller = "User", Icon = "fa-user", Text = "User Creating" },
                        new { Action = "CreatedUserList", Controller = "User", Icon = "fa-user", Text = "System User List" },

                    }
                },
                {
                    (int)E658.Enum.EnumE658UserType.HQAppAuth, new List<dynamic>
                    {
                        new { Action = "Dashboardv1ToHQUser", Controller = "Dashboard", Icon = "fa-dashboard", Text = "Dashboard" },
                        new { Action = "TrnsPortReqList", Controller = "LongRun", Icon = "fa-fast-forward", Text = "Pending Approval List" },
                        //

                    }
                },
                {
                    (int)E658.Enum.EnumE658UserType.SOGO, new List<dynamic>
                    {
                        new { Action = "Dashboardv1ToHQUser", Controller = "Dashboard", Icon = "fa-dashboard", Text = "Dashboard" },
                        new { Action = "TrnsPortReqList", Controller = "LongRun", Icon = "fa-fast-forward", Text = "Pending Approval List" },
                        //new { Action = "CreatedUserList", Controller = "User", Icon = "fa-user", Text = "System User List" },

                    }
                }

            };

            if (menuItems.ContainsKey(userRole))
            {
                foreach (var item in menuItems[userRole])
                {
                    <li class="">
                        <a href="@Url.Action(item.Action, item.Controller)">
                            <i class="fa @item.Icon"></i> <span>@item.Text</span>
                            <span class="pull-right-container">
                                <i class="fa fa-angle-left pull-right"></i>
                            </span>
                        </a>
                    </li>
                }
            }
        }
    </ul>

    </section>
    <!-- /.sidebar -->
</aside>
}else {
                
<aside class="main-sidebar">
    <!-- sidebar: style can be found in sidebar.less -->
    <section class="sidebar">

        <!-- Sidebar user panel -->
        <div class="user-panel">
           
        </div>

        <!-- search form -->
        @*<form action="#" method="get" class="sidebar-form">
                <div class="input-group">-->
                    <input type="text" name="q" class="form-control" placeholder="Search...">
                    <span class="input-group-btn">
                            <button type="submit" name="search" id="search-btn" class="btn btn-flat">
                                <i class="fa fa-search"></i>
                            </button>
                    </span>
                </div>
            </form>*@

        <!-- /.search form -->
        <!-- sidebar menu: : style can be found in sidebar.less -->
        <ul class="sidebar-menu" data-widget="tree">
           

        </ul>

    </section>
    <!-- /.sidebar -->
</aside>       
                
}


